"use strict";
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs");
const lib_1 = require("../../lib");
const evaluate_cfn_1 = require("../evaluate-cfn");
const CFN_CONTEXT = {
    'AWS::Region': 'the_region',
    'AWS::AccountId': 'the_account',
    'AWS::URLSuffix': 'domain.aws',
};
let app;
let stack;
/**
 * Evaluate a possibly string-containing value the same way CFN would do
 *
 * (Be invariant to the specific Fn::Sub or Fn::Join we would output)
 */
function evalCFN(value) {
    return evaluate_cfn_1.evaluateCFN(stack.resolve(value), CFN_CONTEXT);
}
function isAssetManifest(x) {
    return x instanceof cxapi.AssetManifestArtifact;
}
module.exports = {
    'setUp'(cb) {
        app = new lib_1.App({
            context: {
                [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: 'true',
            },
        });
        stack = new lib_1.Stack(app, 'Stack');
        cb();
    },
    'stack template is in asset manifest'(test) {
        var _a;
        // GIVEN
        new lib_1.CfnResource(stack, 'Resource', {
            type: 'Some::Resource',
        });
        // WHEN
        const asm = app.synth();
        // THEN -- the S3 url is advertised on the stack artifact
        const stackArtifact = asm.getStackArtifact('Stack');
        test.equals(stackArtifact.stackTemplateAssetObjectUrl, 's3://cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/4bdae6e3b1b15f08c889d6c9133f24731ee14827a9a9ab9b6b6a9b42b6d34910');
        // THEN - the template is in the asset manifest
        const manifestArtifact = asm.artifacts.filter(isAssetManifest)[0];
        test.ok(manifestArtifact);
        const manifest = JSON.parse(fs.readFileSync(manifestArtifact.file, { encoding: 'utf-8' }));
        const firstFile = (_a = (manifest.files ? manifest.files[Object.keys(manifest.files)[0]] : undefined)) !== null && _a !== void 0 ? _a : {};
        test.deepEqual(firstFile, {
            source: { path: 'Stack.template.json', packaging: 'file' },
            destinations: {
                'current_account-current_region': {
                    bucketName: 'cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}',
                    objectKey: '4bdae6e3b1b15f08c889d6c9133f24731ee14827a9a9ab9b6b6a9b42b6d34910',
                    assumeRoleArn: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-hnb659fds-publishing-role-${AWS::AccountId}-${AWS::Region}',
                },
            },
        });
        test.done();
    },
    'add file asset'(test) {
        // WHEN
        const location = stack.synthesizer.addFileAsset({
            fileName: __filename,
            packaging: lib_1.FileAssetPackaging.FILE,
            sourceHash: 'abcdef',
        });
        // THEN - we have a fixed asset location with region placeholders
        test.equals(evalCFN(location.bucketName), 'cdk-hnb659fds-assets-the_account-the_region');
        test.equals(evalCFN(location.s3Url), 'https://s3.the_region.domain.aws/cdk-hnb659fds-assets-the_account-the_region/abcdef');
        // THEN - object key contains source hash somewhere
        test.ok(location.objectKey.indexOf('abcdef') > -1);
        test.done();
    },
    'add docker image asset'(test) {
        // WHEN
        const location = stack.synthesizer.addDockerImageAsset({
            directoryName: '.',
            sourceHash: 'abcdef',
        });
        // THEN - we have a fixed asset location with region placeholders
        test.equals(evalCFN(location.repositoryName), 'cdk-hnb659fds-container-assets-the_account-the_region');
        test.equals(evalCFN(location.imageUri), 'the_account.dkr.ecr.the_region.domain.aws/cdk-hnb659fds-container-assets-the_account-the_region:abcdef');
        test.done();
    },
    'synthesis'(test) {
        // GIVEN
        stack.synthesizer.addFileAsset({
            fileName: __filename,
            packaging: lib_1.FileAssetPackaging.FILE,
            sourceHash: 'abcdef',
        });
        stack.synthesizer.addDockerImageAsset({
            directoryName: '.',
            sourceHash: 'abcdef',
        });
        // WHEN
        const asm = app.synth();
        // THEN - we have an asset manifest with both assets and the stack template in there
        const manifestArtifact = asm.artifacts.filter(isAssetManifest)[0];
        test.ok(manifestArtifact);
        const manifest = JSON.parse(fs.readFileSync(manifestArtifact.file, { encoding: 'utf-8' }));
        test.equals(Object.keys(manifest.files || {}).length, 2);
        test.equals(Object.keys(manifest.dockerImages || {}).length, 1);
        // THEN - every artifact has an assumeRoleArn
        for (const file of Object.values({ ...manifest.files, ...manifest.dockerImages })) {
            for (const destination of Object.values(file.destinations)) {
                test.ok(destination.assumeRoleArn);
            }
        }
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,