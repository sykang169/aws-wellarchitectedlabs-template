"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const autoscaling_generated_1 = require("./autoscaling.generated");
/**
 * Define a life cycle hook
 */
class LifecycleHook extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.lifecycleHookName,
        });
        this.role = props.role || new iam.Role(this, 'Role', {
            assumedBy: new iam.ServicePrincipal('autoscaling.amazonaws.com'),
        });
        const targetProps = props.notificationTarget.bind(this, this);
        const resource = new autoscaling_generated_1.CfnLifecycleHook(this, 'Resource', {
            autoScalingGroupName: props.autoScalingGroup.autoScalingGroupName,
            defaultResult: props.defaultResult,
            heartbeatTimeout: props.heartbeatTimeout && props.heartbeatTimeout.toSeconds(),
            lifecycleHookName: this.physicalName,
            lifecycleTransition: props.lifecycleTransition,
            notificationMetadata: props.notificationMetadata,
            notificationTargetArn: targetProps.notificationTargetArn,
            roleArn: this.role.roleArn,
        });
        // A LifecycleHook resource is going to do a permissions test upon creation,
        // so we have to make sure the role has full permissions before creating the
        // lifecycle hook.
        resource.node.addDependency(this.role);
        this.lifecycleHookName = resource.ref;
    }
}
exports.LifecycleHook = LifecycleHook;
var DefaultResult;
(function (DefaultResult) {
    DefaultResult["CONTINUE"] = "CONTINUE";
    DefaultResult["ABANDON"] = "ABANDON";
})(DefaultResult = exports.DefaultResult || (exports.DefaultResult = {}));
/**
 * What instance transition to attach the hook to
 */
var LifecycleTransition;
(function (LifecycleTransition) {
    /**
     * Execute the hook when an instance is about to be added
     */
    LifecycleTransition["INSTANCE_LAUNCHING"] = "autoscaling:EC2_INSTANCE_LAUNCHING";
    /**
     * Execute the hook when an instance is about to be terminated
     */
    LifecycleTransition["INSTANCE_TERMINATING"] = "autoscaling:EC2_INSTANCE_TERMINATING";
})(LifecycleTransition = exports.LifecycleTransition || (exports.LifecycleTransition = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlmZWN5Y2xlLWhvb2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsaWZlY3ljbGUtaG9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUF3QztBQUN4Qyx3Q0FBeUU7QUFFekUsbUVBQTJEO0FBMkUzRDs7R0FFRztBQUNILE1BQWEsYUFBYyxTQUFRLGVBQVE7SUFZekMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUF5QjtRQUNqRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLFlBQVksRUFBRSxLQUFLLENBQUMsaUJBQWlCO1NBQ3RDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRTtZQUNuRCxTQUFTLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsMkJBQTJCLENBQUM7U0FDakUsQ0FBQyxDQUFDO1FBRUgsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFOUQsTUFBTSxRQUFRLEdBQUcsSUFBSSx3Q0FBZ0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ3RELG9CQUFvQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0I7WUFDakUsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFO1lBQzlFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxZQUFZO1lBQ3BDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxtQkFBbUI7WUFDOUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLG9CQUFvQjtZQUNoRCxxQkFBcUIsRUFBRSxXQUFXLENBQUMscUJBQXFCO1lBQ3hELE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87U0FDM0IsQ0FBQyxDQUFDO1FBRUgsNEVBQTRFO1FBQzVFLDRFQUE0RTtRQUM1RSxrQkFBa0I7UUFDbEIsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXZDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDO0lBQ3hDLENBQUM7Q0FDRjtBQXpDRCxzQ0F5Q0M7QUFFRCxJQUFZLGFBR1g7QUFIRCxXQUFZLGFBQWE7SUFDdkIsc0NBQXFCLENBQUE7SUFDckIsb0NBQW1CLENBQUE7QUFDckIsQ0FBQyxFQUhXLGFBQWEsR0FBYixxQkFBYSxLQUFiLHFCQUFhLFFBR3hCO0FBRUQ7O0dBRUc7QUFDSCxJQUFZLG1CQVVYO0FBVkQsV0FBWSxtQkFBbUI7SUFDN0I7O09BRUc7SUFDSCxnRkFBeUQsQ0FBQTtJQUV6RDs7T0FFRztJQUNILG9GQUE2RCxDQUFBO0FBQy9ELENBQUMsRUFWVyxtQkFBbUIsR0FBbkIsMkJBQW1CLEtBQW5CLDJCQUFtQixRQVU5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGlhbSBmcm9tICdAYXdzLWNkay9hd3MtaWFtJztcbmltcG9ydCB7IENvbnN0cnVjdCwgRHVyYXRpb24sIElSZXNvdXJjZSwgUmVzb3VyY2UgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IElBdXRvU2NhbGluZ0dyb3VwIH0gZnJvbSAnLi9hdXRvLXNjYWxpbmctZ3JvdXAnO1xuaW1wb3J0IHsgQ2ZuTGlmZWN5Y2xlSG9vayB9IGZyb20gJy4vYXV0b3NjYWxpbmcuZ2VuZXJhdGVkJztcbmltcG9ydCB7IElMaWZlY3ljbGVIb29rVGFyZ2V0IH0gZnJvbSAnLi9saWZlY3ljbGUtaG9vay10YXJnZXQnO1xuXG4vKipcbiAqIEJhc2ljIHByb3BlcnRpZXMgZm9yIGEgbGlmZWN5Y2xlIGhvb2tcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXNpY0xpZmVjeWNsZUhvb2tQcm9wcyB7XG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBsaWZlY3ljbGUgaG9va1xuICAgKlxuICAgKiBAZGVmYXVsdCAtIEF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIG5hbWUuXG4gICAqL1xuICByZWFkb25seSBsaWZlY3ljbGVIb29rTmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGFjdGlvbiB0aGUgQXV0byBTY2FsaW5nIGdyb3VwIHRha2VzIHdoZW4gdGhlIGxpZmVjeWNsZSBob29rIHRpbWVvdXQgZWxhcHNlcyBvciBpZiBhbiB1bmV4cGVjdGVkIGZhaWx1cmUgb2NjdXJzLlxuICAgKlxuICAgKiBAZGVmYXVsdCBDb250aW51ZVxuICAgKi9cbiAgcmVhZG9ubHkgZGVmYXVsdFJlc3VsdD86IERlZmF1bHRSZXN1bHQ7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gdGltZSBiZXR3ZWVuIGNhbGxzIHRvIFJlY29yZExpZmVjeWNsZUFjdGlvbkhlYXJ0YmVhdCBmb3IgdGhlIGhvb2tcbiAgICpcbiAgICogSWYgdGhlIGxpZmVjeWNsZSBob29rIHRpbWVzIG91dCwgcGVyZm9ybSB0aGUgYWN0aW9uIGluIERlZmF1bHRSZXN1bHQuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gTm8gaGVhcnRiZWF0IHRpbWVvdXQuXG4gICAqL1xuICByZWFkb25seSBoZWFydGJlYXRUaW1lb3V0PzogRHVyYXRpb247XG5cbiAgLyoqXG4gICAqIFRoZSBzdGF0ZSBvZiB0aGUgQW1hem9uIEVDMiBpbnN0YW5jZSB0byB3aGljaCB5b3Ugd2FudCB0byBhdHRhY2ggdGhlIGxpZmVjeWNsZSBob29rLlxuICAgKi9cbiAgcmVhZG9ubHkgbGlmZWN5Y2xlVHJhbnNpdGlvbjogTGlmZWN5Y2xlVHJhbnNpdGlvbjtcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBkYXRhIHRvIHBhc3MgdG8gdGhlIGxpZmVjeWNsZSBob29rIHRhcmdldFxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIG1ldGFkYXRhLlxuICAgKi9cbiAgcmVhZG9ubHkgbm90aWZpY2F0aW9uTWV0YWRhdGE/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0YXJnZXQgb2YgdGhlIGxpZmVjeWNsZSBob29rXG4gICAqL1xuICByZWFkb25seSBub3RpZmljYXRpb25UYXJnZXQ6IElMaWZlY3ljbGVIb29rVGFyZ2V0O1xuXG4gIC8qKlxuICAgKiBUaGUgcm9sZSB0aGF0IGFsbG93cyBwdWJsaXNoaW5nIHRvIHRoZSBub3RpZmljYXRpb24gdGFyZ2V0XG4gICAqXG4gICAqIEBkZWZhdWx0IC0gQSByb2xlIGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlZC5cbiAgICovXG4gIHJlYWRvbmx5IHJvbGU/OiBpYW0uSVJvbGU7XG59XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgYSBMaWZlY3ljbGUgaG9va1xuICovXG5leHBvcnQgaW50ZXJmYWNlIExpZmVjeWNsZUhvb2tQcm9wcyBleHRlbmRzIEJhc2ljTGlmZWN5Y2xlSG9va1Byb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBBdXRvU2NhbGluZ0dyb3VwIHRvIGFkZCB0aGUgbGlmZWN5Y2xlIGhvb2sgdG9cbiAgICovXG4gIHJlYWRvbmx5IGF1dG9TY2FsaW5nR3JvdXA6IElBdXRvU2NhbGluZ0dyb3VwO1xufVxuXG4vKipcbiAqIEEgYmFzaWMgbGlmZWN5Y2xlIGhvb2sgb2JqZWN0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUxpZmVjeWNsZUhvb2sgZXh0ZW5kcyBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogVGhlIHJvbGUgZm9yIHRoZSBsaWZlY3ljbGUgaG9vayB0byBleGVjdXRlXG4gICAqL1xuICByZWFkb25seSByb2xlOiBpYW0uSVJvbGU7XG59XG5cbi8qKlxuICogRGVmaW5lIGEgbGlmZSBjeWNsZSBob29rXG4gKi9cbmV4cG9ydCBjbGFzcyBMaWZlY3ljbGVIb29rIGV4dGVuZHMgUmVzb3VyY2UgaW1wbGVtZW50cyBJTGlmZWN5Y2xlSG9vayB7XG4gIC8qKlxuICAgKiBUaGUgcm9sZSB0aGF0IGFsbG93cyB0aGUgQVNHIHRvIHB1Ymxpc2ggdG8gdGhlIG5vdGlmaWNhdGlvbiB0YXJnZXRcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSByb2xlOiBpYW0uSVJvbGU7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoaXMgbGlmZWN5Y2xlIGhvb2tcbiAgICogQGF0dHJpYnV0ZVxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGxpZmVjeWNsZUhvb2tOYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IExpZmVjeWNsZUhvb2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgcGh5c2ljYWxOYW1lOiBwcm9wcy5saWZlY3ljbGVIb29rTmFtZSxcbiAgICB9KTtcblxuICAgIHRoaXMucm9sZSA9IHByb3BzLnJvbGUgfHwgbmV3IGlhbS5Sb2xlKHRoaXMsICdSb2xlJywge1xuICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2F1dG9zY2FsaW5nLmFtYXpvbmF3cy5jb20nKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHRhcmdldFByb3BzID0gcHJvcHMubm90aWZpY2F0aW9uVGFyZ2V0LmJpbmQodGhpcywgdGhpcyk7XG5cbiAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBDZm5MaWZlY3ljbGVIb29rKHRoaXMsICdSZXNvdXJjZScsIHtcbiAgICAgIGF1dG9TY2FsaW5nR3JvdXBOYW1lOiBwcm9wcy5hdXRvU2NhbGluZ0dyb3VwLmF1dG9TY2FsaW5nR3JvdXBOYW1lLFxuICAgICAgZGVmYXVsdFJlc3VsdDogcHJvcHMuZGVmYXVsdFJlc3VsdCxcbiAgICAgIGhlYXJ0YmVhdFRpbWVvdXQ6IHByb3BzLmhlYXJ0YmVhdFRpbWVvdXQgJiYgcHJvcHMuaGVhcnRiZWF0VGltZW91dC50b1NlY29uZHMoKSxcbiAgICAgIGxpZmVjeWNsZUhvb2tOYW1lOiB0aGlzLnBoeXNpY2FsTmFtZSxcbiAgICAgIGxpZmVjeWNsZVRyYW5zaXRpb246IHByb3BzLmxpZmVjeWNsZVRyYW5zaXRpb24sXG4gICAgICBub3RpZmljYXRpb25NZXRhZGF0YTogcHJvcHMubm90aWZpY2F0aW9uTWV0YWRhdGEsXG4gICAgICBub3RpZmljYXRpb25UYXJnZXRBcm46IHRhcmdldFByb3BzLm5vdGlmaWNhdGlvblRhcmdldEFybixcbiAgICAgIHJvbGVBcm46IHRoaXMucm9sZS5yb2xlQXJuLFxuICAgIH0pO1xuXG4gICAgLy8gQSBMaWZlY3ljbGVIb29rIHJlc291cmNlIGlzIGdvaW5nIHRvIGRvIGEgcGVybWlzc2lvbnMgdGVzdCB1cG9uIGNyZWF0aW9uLFxuICAgIC8vIHNvIHdlIGhhdmUgdG8gbWFrZSBzdXJlIHRoZSByb2xlIGhhcyBmdWxsIHBlcm1pc3Npb25zIGJlZm9yZSBjcmVhdGluZyB0aGVcbiAgICAvLyBsaWZlY3ljbGUgaG9vay5cbiAgICByZXNvdXJjZS5ub2RlLmFkZERlcGVuZGVuY3kodGhpcy5yb2xlKTtcblxuICAgIHRoaXMubGlmZWN5Y2xlSG9va05hbWUgPSByZXNvdXJjZS5yZWY7XG4gIH1cbn1cblxuZXhwb3J0IGVudW0gRGVmYXVsdFJlc3VsdCB7XG4gIENPTlRJTlVFID0gJ0NPTlRJTlVFJyxcbiAgQUJBTkRPTiA9ICdBQkFORE9OJyxcbn1cblxuLyoqXG4gKiBXaGF0IGluc3RhbmNlIHRyYW5zaXRpb24gdG8gYXR0YWNoIHRoZSBob29rIHRvXG4gKi9cbmV4cG9ydCBlbnVtIExpZmVjeWNsZVRyYW5zaXRpb24ge1xuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgaG9vayB3aGVuIGFuIGluc3RhbmNlIGlzIGFib3V0IHRvIGJlIGFkZGVkXG4gICAqL1xuICBJTlNUQU5DRV9MQVVOQ0hJTkcgPSAnYXV0b3NjYWxpbmc6RUMyX0lOU1RBTkNFX0xBVU5DSElORycsXG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIGhvb2sgd2hlbiBhbiBpbnN0YW5jZSBpcyBhYm91dCB0byBiZSB0ZXJtaW5hdGVkXG4gICAqL1xuICBJTlNUQU5DRV9URVJNSU5BVElORyA9ICdhdXRvc2NhbGluZzpFQzJfSU5TVEFOQ0VfVEVSTUlOQVRJTkcnLFxufVxuIl19